import express from "express";
import fetch from "node-fetch";
import bodyParser from "body-parser";
import fs from "fs";
import admin from "firebase-admin";
import { Resend } from "resend";
import OpenAI from "openai";

const app = express();
const PORT = process.env.PORT || 10000;
app.use(bodyParser.json());

const resend = new Resend(process.env.RESEND_API_KEY);
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

const LAST_RESULT = "./latest.json";
let webhookCounter = 0;
let isReadyToFetchText = false;

// üîê Firebase  init
let credential;
if (process.env.FIREBASE_SERVICE_ACCOUNT_JSON) {
  try {
    const serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT_JSON);
    credential = admin.credential.cert(serviceAccount);
  } catch (err) {
    console.error("‚ùå FIREBASE_SERVICE_ACCOUNT_JSON —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON");
    process.exit(1);
  }
} else {
  console.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è FIREBASE_SERVICE_ACCOUNT_JSON –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
  process.exit(1);
}
admin.initializeApp({ credential });
const db = admin.firestore();

// ‚ú® –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–∂–∏–º–∫–∏  —Ç–µ–∫—Å—Ç–∞
async function summarizeText(text) {
  const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ —Å–¥–µ–ª–∞–π —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—É—é –≤—ã–∂–∏–º–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. 
–ù–µ —Å–æ–∫—Ä–∞—â–∞–π –¥–æ –∫—Ä–∞—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Å–∫–∞–∑–∞. –í—ã–¥–µ–ª–∏ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∏–¥–µ–∏, –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–≤–æ–¥—ã.

–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
${text}
  `;

  const response = await openai.chat.completions.create({
    model: "gpt-4o",
    messages: [{ role: "user", content: prompt }],
  });

  return response.choices[0].message.content;
}

// üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
app.get("/", (req, res) => {
  res.send("‚úÖ ScreenApp Webhook is running");
});

// üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook
app.post("/webhook", async (req, res) => {
  const data = req.body;
  console.log("üì© Webhook received:", JSON.stringify(data, null, 2));

  webhookCounter++;

  if (webhookCounter === 1) {
    console.log("‚ö†Ô∏è First webhook received. Waiting for the second one...");
    return res.status(200).send({ success: true, message: "Waiting for second webhook." });
  }

  if (webhookCounter === 2) {
    let content = {};
    try {
      if (data.file?.transcriptUrl) {
        console.log("üóíÔ∏è Downloading transcript...");
        const resp = await fetch(data.file.transcriptUrl);
        const transcript = await resp.json();
        const rawText = transcript.text || "(no text)";
        console.log("üó£Ô∏è Transcript downloaded.");

        content.transcript = rawText;
        console.log("‚úÖ Transcript saved without summarization.");

      } else {
        content.error = "No transcript found.";
        console.log("‚ö†Ô∏è No transcript in payload.");
      }

      fs.writeFileSync(LAST_RESULT, JSON.stringify(content, null, 2));
      isReadyToFetchText = true;
      webhookCounter = 0;

      res.status(200).send({ success: true });
    } catch (err) {
      console.error("‚ùå Error:", err);
      res.status(500).send({ success: false, error: err.message });
    }
  }
});

// üìÇ –û—Ç–¥–∞—á–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
app.get("/latest", (req, res) => {
  if (isReadyToFetchText) {
    isReadyToFetchText = false;
    res.send("ok");
  } else {
    res.status(403).send({ error: "Data is not ready yet." });
  }
});


// üïì –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∏—Å—å–º–∞–º–∏
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// ‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ Firestore
app.post("/share", async (req, res) => {
  try {
    const summaryHtml = req.body.text; // <-- –í–æ—Ç –æ–Ω –Ω–∞—à <b><br> —Ç–µ–∫—Å—Ç
    if (!summaryHtml) {
      return res.status(400).send({ error: "No text provided" });
    }

    const snapshot = await db.collection("students").get();
    if (snapshot.empty) {
      return res.status(404).send({ error: "No students found." });
    }

    for (const doc of snapshot.docs) {
      const { email } = doc.data();
      if (!email) continue;

      console.log("üìß Sending email to:", email);
      
      const { data: result, error } = await resend.emails.send({
        from: '"Almavalley Hub" <noreply@smartlesson.online>',
        to: email,
        subject: "–ù–æ–≤—ã–π –∫–æ–Ω—Å–ø–µ–∫—Ç –≤—Å—Ç—Ä–µ—á–∏",
        html: summaryHtml,   // <-- –∏—Å–ø–æ–ª—å–∑—É–µ–º html, –Ω–µ text!
      });

      if (error) {
        console.error(`‚ùå Error sending to ${email}:`, error);
      } else {
        console.log(`‚úÖ Email sent: ${result.id}`);
      }

      await sleep(500);
    }

    res.send({ success: true, message: "Emails sent!" });

  } catch (err) {
    console.error("‚ùå /share error:", err);
    res.status(500).send({ error: err.message });
  }
});


// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => console.log(`üöÄ Webhook server running on port ${PORT}`));


